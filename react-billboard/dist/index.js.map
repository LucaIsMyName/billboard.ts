{"version":3,"sources":["../src/context/BillboardContext.tsx","../src/components/Billboard/BillboardTitle.tsx","../src/components/Billboard/BillboardDescription.tsx","../src/components/Billboard/BillboardChart.tsx","../src/utils/chartConfigs.ts","../src/components/Billboard/BillboardDataset.tsx","../src/components/Billboard/BillboardLegend.tsx","../src/components/Billboard/Billboard.tsx","../src/index.ts"],"names":["jsx","useEffect","jsxs"],"mappings":";AAAA,SAAgB,eAAe,YAAY,eAAe;AAiBtD;AAdJ,IAAM,mBAAmB,cAAgD,MAAS;AAO3E,IAAM,oBAAsD,CAAC;AAAA,EAClE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,QAAQ,QAAQ,OAAO,EAAE,QAAQ,IAAI,CAAC,OAAO,CAAC;AAEpD,SACE,oBAAC,iBAAiB,UAAjB,EAA0B,OACxB,UACH;AAEJ;AAEO,IAAM,eAAe,MAAM;AAChC,QAAM,UAAU,WAAW,gBAAgB;AAC3C,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MAAM,sDAAsD;AAAA,EACxE;AACA,SAAO;AACT;;;ACfI,gBAAAA,YAAA;AAVG,IAAM,iBAAoD,CAAC;AAAA,EAChE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AACjC,QAAM,QAAQ,YAAY,QAAQ;AAElC,MAAI,CAAC;AAAO,WAAO;AAEnB,SACE,gBAAAA,KAAC,QAAG,WACD,iBACH;AAEJ;;;ACJI,gBAAAA,YAAA;AAVG,IAAM,uBAA0D,CAAC;AAAA,EACtE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AACjC,QAAM,cAAc,YAAY,QAAQ;AAExC,MAAI,CAAC;AAAa,WAAO;AAEzB,SACE,gBAAAA,KAAC,OAAE,WACA,uBACH;AAEJ;;;AClBA,SAAgB,WAAW,cAAc;AACzC,OAAO,gBAAgB;AACvB,OAAO,qBAAqB;;;ACArB,IAAM,iBAAiB,CAAC,YAAkD;AAC/E,QAAM,aAAiC;AAAA,IACrC,OAAO;AAAA,MACL,MAAM,QAAQ;AAAA,MACd,OAAO;AAAA,QACL,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,OAAO;AAAA,QACL,MAAM,QAAQ,OAAO;AAAA,MACvB;AAAA,MACA,KAAK,QAAQ,OAAO;AAAA,MACpB,KAAK,QAAQ,OAAO;AAAA,IACtB;AAAA,IACA,OAAO;AAAA,MACL,OAAO;AAAA,QACL,MAAM,QAAQ,OAAO;AAAA,MACvB;AAAA,MACA,KAAK,QAAQ,OAAO;AAAA,MACpB,KAAK,QAAQ,OAAO;AAAA,IACtB;AAAA,IACA,aAAa;AAAA,MACX,QAAQ;AAAA,QACN,WAAW;AAAA,UACT,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,IACA,QACE,QAAQ,UAAU,IAAI,CAAC,aAAa;AAAA,MAClC,MAAM,QAAQ;AAAA,MACd,MAAM,QAAQ;AAAA,MACd,OAAO,QAAQ;AAAA,IACjB,EAAE,KAAK,CAAC;AAAA,EACZ;AAGA,UAAQ,QAAQ,MAAM;AAAA,IACpB,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,aAAa;AAAA,UACX,GAAG,WAAW;AAAA,UACd,MAAM;AAAA,YACJ,QAAQ;AAAA,cACN,SAAS;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,aAAa;AAAA,UACX,GAAG,WAAW;AAAA,UACd,MAAM;AAAA,YACJ,aAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IAEF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,aAAa;AAAA,UACX,GAAG,WAAW;AAAA,UACd,KAAK;AAAA,YACH,cAAc;AAAA,UAChB;AAAA,QACF;AAAA,MACF;AAAA,IAIF;AACE,aAAO;AAAA,EACX;AACF;;;AD1DI,SACE,OAAAA,MADF;AAtBG,IAAM,iBAAgD,CAAC;AAAA,EAC5D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AACjC,QAAM,WAAW,OAAkC,IAAI;AAEvD,QAAM,eAAe,eAAe;AAAA,IAClC,GAAG;AAAA,IACH,OAAO,KAAK,QAAQ;AAAA,IACpB,OAAO,KAAK,QAAQ;AAAA,EACtB,CAAC;AAED,YAAU,MAAM;AACd,QAAI,SAAS,SAAS;AACpB,eAAS,QAAQ,MAAM,OAAO;AAAA,IAChC;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SACE,qBAAC,SAAI,WACH;AAAA,oBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,KAAK;AAAA;AAAA,IACP;AAAA,IACC;AAAA,KACH;AAEJ;;;AEtCA,SAAgB,aAAAC,kBAAiB;AAI1B,IAAM,mBAAoD,CAAC;AAAA,EAChE;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AAGjC,EAAAA,WAAU,MAAM;AAAA,EAGhB,GAAG,CAAC,MAAM,MAAM,OAAO,OAAO,CAAC;AAE/B,SAAO;AACT;;;ACDY,SACE,OAAAD,MADF,QAAAE,aAAA;AAbL,IAAM,kBAAqD,CAAC;AAAA,EACjE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AAEjC,MAAI,CAAC,QAAQ,UAAU;AAAQ,WAAO;AAEtC,SACE,gBAAAF,KAAC,SAAI,WACF,sBACC,gBAAAA,KAAC,QAAG,WAAU,cACX,kBAAQ,SAAS,IAAI,CAAC,SAAS,UAC9B,gBAAAE,MAAC,QAAe,WAAU,2BACxB;AAAA,oBAAAF;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,OAAO,EAAE,iBAAiB,QAAQ,MAAM;AAAA;AAAA,IAC1C;AAAA,IACA,gBAAAA,KAAC,UAAM,kBAAQ,MAAK;AAAA,OALb,KAMT,CACD,GACH,GAEJ;AAEJ;;;ACZqB,gBAAAA,YAAA;AAJrB,IAAM,qBAAqB,CAAC,EAAE,UAAU,GAAG,QAAQ,MAAsB;AACvE,SACE,gBAAAA,KAAC,qBAAkB,SACjB,0BAAAA,KAAC,SAAI,WAAW,QAAQ,WACrB,sBAAY,gBAAAA,KAAC,kBAAe,GAC/B,GACF;AAEJ;AAEO,IAAM,YAAY,OAAO,OAAO,oBAAoB;AAAA,EACzD,OAAO;AAAA,EACP,aAAa;AAAA,EACb,OAAO;AAAA,EACP,SAAS;AAAA,EACT,QAAQ;AACV,CAAC;;;ACdM,IAAM,aAAa,MAAM;AAC9B,UAAQ,IAAI,aAAa;AAC3B","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { BillboardContextType, BillboardOptions } from '../types';\n\nconst BillboardContext = createContext<BillboardContextType | undefined>(undefined);\n\nexport interface BillboardProviderProps {\n  children: React.ReactNode;\n  options: BillboardOptions;\n}\n\nexport const BillboardProvider: React.FC<BillboardProviderProps> = ({\n  children,\n  options,\n}) => {\n  const value = useMemo(() => ({ options }), [options]);\n\n  return (\n    <BillboardContext.Provider value={value}>\n      {children}\n    </BillboardContext.Provider>\n  );\n};\n\nexport const useBillboard = () => {\n  const context = useContext(BillboardContext);\n  if (context === undefined) {\n    throw new Error('useBillboard must be used within a BillboardProvider');\n  }\n  return context;\n};","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardTitle: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n  const title = children || options.title;\n\n  if (!title) return null;\n\n  return (\n    <h2 className={className}>\n      {title}\n    </h2>\n  );\n};\n","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardDescription: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n  const description = children || options.description;\n\n  if (!description) return null;\n\n  return (\n    <p className={className}>\n      {description}\n    </p>\n  );\n};","import React, { useEffect, useRef } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { BillboardChartProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\nimport { getChartConfig } from '../../utils/chartConfigs';\n\nexport const BillboardChart: React.FC<BillboardChartProps> = ({\n  children,\n  className,\n  x,\n  y,\n}) => {\n  const { options } = useBillboard();\n  const chartRef = useRef<HighchartsReact.RefObject>(null);\n\n  const chartOptions = getChartConfig({\n    ...options,\n    xAxis: x || options.xAxis,\n    yAxis: y || options.yAxis,\n  });\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.chart.reflow();\n    }\n  }, []);\n\n  return (\n    <div className={className}>\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={chartOptions}\n        ref={chartRef}\n      />\n      {children}\n    </div>\n  );\n};\n","import { BillboardOptions } from \"../types\";\n\nexport const getChartConfig = (options: BillboardOptions): Highcharts.Options => {\n  const baseConfig: Highcharts.Options = {\n    chart: {\n      type: options.type as any,\n      style: {\n        fontFamily: \"inherit\",\n      },\n    },\n    title: {\n      text: undefined, // We handle title separately\n    },\n    credits: {\n      enabled: false,\n    },\n    xAxis: {\n      title: {\n        text: options.xAxis?.title,\n      },\n      min: options.xAxis?.min,\n      max: options.xAxis?.max,\n    },\n    yAxis: {\n      title: {\n        text: options.yAxis?.title,\n      },\n      min: options.yAxis?.min,\n      max: options.yAxis?.max,\n    },\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 1000,\n        },\n      },\n    },\n    series:\n      options.datasets?.map((dataset) => ({\n        name: dataset.name,\n        data: dataset.data,\n        color: dataset.color,\n      })) || [],\n  };\n\n  // Apply chart-specific configurations based on type and variant\n  switch (options.type) {\n    case \"line\":\n      return {\n        ...baseConfig,\n        plotOptions: {\n          ...baseConfig.plotOptions,\n          line: {\n            marker: {\n              enabled: true,\n            },\n          },\n        },\n      };\n\n    case \"area\":\n      return {\n        ...baseConfig,\n        plotOptions: {\n          ...baseConfig.plotOptions,\n          area: {\n            fillOpacity: 0.3,\n          },\n        },\n      };\n\n    case \"bar\":\n      return {\n        ...baseConfig,\n        plotOptions: {\n          ...baseConfig.plotOptions,\n          bar: {\n            borderRadius: 4,\n          },\n        },\n      };\n\n    // Add more chart type configurations as needed\n\n    default:\n      return baseConfig;\n  }\n};\n","import React, { useEffect } from 'react';\nimport { BillboardDatasetProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardDataset: React.FC<BillboardDatasetProps> = ({\n  data,\n  name,\n  color,\n}) => {\n  const { options } = useBillboard();\n\n  // This is a render-less component that updates the parent chart's data\n  useEffect(() => {\n    // Implementation to update chart data\n    // This would need to be coordinated with the Chart component\n  }, [data, name, color, options]);\n\n  return null;\n};","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardLegend: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n\n  if (!options.datasets?.length) return null;\n\n  return (\n    <div className={className}>\n      {children || (\n        <ul className=\"flex gap-4\">\n          {options.datasets.map((dataset, index) => (\n            <li key={index} className=\"flex items-center gap-2\">\n              <span\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: dataset.color }}\n              />\n              <span>{dataset.name}</span>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { BillboardProvider } from '../../context/BillboardContext';\nimport { BillboardOptions } from '../../types';\nimport { BillboardTitle } from './BillboardTitle';\nimport { BillboardDescription } from './BillboardDescription';\nimport { BillboardChart } from './BillboardChart';\nimport { BillboardDataset } from './BillboardDataset';\nimport { BillboardLegend } from './BillboardLegend';\n\nexport interface BillboardProps extends BillboardOptions {\n  children?: React.ReactNode;\n}\n\nconst BillboardComponent = ({ children, ...options }: BillboardProps) => {\n  return (\n    <BillboardProvider options={options}>\n      <div className={options.className}>\n        {children || <BillboardChart />}\n      </div>\n    </BillboardProvider>\n  );\n};\n\nexport const Billboard = Object.assign(BillboardComponent, {\n  Title: BillboardTitle,\n  Description: BillboardDescription,\n  Chart: BillboardChart,\n  Dataset: BillboardDataset,\n  Legend: BillboardLegend,\n});","export { Billboard } from './components/Billboard/Billboard';\nexport type {\n  BillboardProps,\n} from './components/Billboard/Billboard';\nexport type {\n  ChartType,\n  AxisOptions,\n  DataPoint,\n  Dataset,\n  BillboardOptions,\n  BillboardComponentProps,\n  BillboardChartProps,\n  BillboardDatasetProps,\n} from './types';\n\nexport const testExport = () => {\n  console.log('Test export');\n};"]}