{"version":3,"sources":["../src/context/BillboardContext.tsx","../src/components/Billboard/BillboardTitle.tsx","../src/components/Billboard/BillboardDescription.tsx","../src/components/Billboard/BillboardChart.tsx","../src/components/Billboard/BillboardDataset.tsx","../src/components/Billboard/BillboardDatapoint.tsx","../src/components/Billboard/BillboardLegend.tsx","../src/components/Billboard/Billboard.tsx","../src/index.ts"],"names":["jsx","React","_a","_b","_c","_d","_e","_f","_g","_h","_i","jsxs"],"mappings":";AAAA,SAAgB,eAAe,YAAY,gBAAgB;AAgClD;AA7BT,IAAM,mBAAmB,cAAgD,MAAS;AAO3E,IAAM,oBAAsD,CAAC,EAAE,UAAU,SAAS,eAAe,MAAM;AAC5G,QAAM,iBAAiB;AAAA,IACrB,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,CAAC,YAAY,IAAI,SAAoB,eAAe,YAAY,CAAC,CAAC;AAExE,QAAM,QAAQ;AAAA,IACZ,SAAS;AAAA,MACP,GAAG;AAAA,MACH,GAAG;AAAA,MACH,UAAU;AAAA,IACZ;AAAA,EACF;AAEA,SAAO,oBAAC,iBAAiB,UAAjB,EAA0B,OAAe,UAAS;AAC5D;AAEO,IAAM,eAAe,MAAM;AAChC,QAAM,UAAU,WAAW,gBAAgB;AAC3C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,sDAAsD;AAAA,EACxE;AACA,SAAO;AACT;;;AC3BI,gBAAAA,YAAA;AAVG,IAAM,iBAAoD,CAAC;AAAA,EAChE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AACjC,QAAM,QAAQ,YAAY,QAAQ;AAElC,MAAI,CAAC;AAAO,WAAO;AAEnB,SACE,gBAAAA,KAAC,QAAG,WACD,iBACH;AAEJ;;;ACJI,gBAAAA,YAAA;AAVG,IAAM,uBAA0D,CAAC;AAAA,EACtE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,QAAQ,IAAI,aAAa;AACjC,QAAM,cAAc,YAAY,QAAQ;AAExC,MAAI,CAAC;AAAa,WAAO;AAEzB,SACE,gBAAAA,KAAC,OAAE,WACA,uBACH;AAEJ;;;AClBA,OAAOC,YAAW;AAClB,SAAS,WAAW,MAAM,UAAU,KAAK,WAAW,MAAM,UAAU,KAAK,cAAc,SAAS,OAAO,OAAO,eAAe,SAAS,qBAAqB,QAAQ,aAAa,QAAQ,WAAyB,eAAe;;;ACDhO,OAAOA,UAAS,eAAe;;;ACW3B,gBAAAD,YAAA;AAFG,IAAM,qBAAwD,CAAC,UAAU;AAC9E,SACE,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC,OAAO,EAAE,SAAS,QAAQ;AAAA,MAC1B,4BAA0B;AAAA,MAC1B,cAAY,KAAK,UAAU,KAAK;AAAA;AAAA,EAClC;AAEJ;AAEA,mBAAmB,cAAc;;;AD2B7B,gBAAAA,YAAA;AArCG,IAAM,mBAA4D,CAAC;AAAA,EACxE;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,gBAAgB,QAAQ,MAAM;AAClC,QAAI,UAAU;AACZ,aAAOC,OAAM,SAAS,QAAQ,QAAQ,EACnC;AAAA,QAAO,WAAM;AAnBtB;AAoBU,iBAAAA,OAAM,eAAe,KAAK,MACzB,MAAM,SAAS,wBAAuB,WAAM,SAAN,mBAAoB,iBAAgB;AAAA;AAAA,MAC7E,EACC,IAAI,WAAS;AAvBtB;AAwBU,cAAM,QAAS,MAA6B;AAC5C,eAAO;AAAA,UACL,GAAG,MAAM;AAAA,UACT,GAAG,MAAM;AAAA,UACT,MAAM,MAAM;AAAA,UACZ,SAAO,WAAM,UAAN,mBAAa,UAAS,MAAM;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,IACL;AACA,WAAO,QAAQ,CAAC;AAAA,EAClB,GAAG,CAAC,UAAU,IAAI,CAAC;AAGnB,QAAM,cAAc;AAAA,IAClB;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AAGA,SACE,gBAAAD;AAAA,IAAC;AAAA;AAAA,MACC,OAAO,EAAE,SAAS,OAAO;AAAA,MACzB,0BAAwB;AAAA,MACxB,aAAW,KAAK,UAAU,WAAW;AAAA,MAEpC;AAAA;AAAA,EACH;AAEJ;AAEA,iBAAiB,cAAc;;;ADCN,SAwFa,OAAAA,MAxFb;AAvCzB,IAAM,kBAAkB;AAAA,EACtB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,KAAK;AAAA,EACL,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AACV;AAEA,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,KAAK;AAAA,EACL,KAAK;AAAA,EACL,SAAS;AACX;AAqCO,IAAM,iBAAgD,CAAC,EAAE,UAAU,WAAW,GAAG,EAAE,MAAM;AAxEhG;AAyEE,QAAM,EAAE,QAAQ,IAAI,aAAa;AAGjC,QAAM,gBAAgBC,OAAM,SAAS,QAAQ,QAAQ,EAClD,OAAO,CAAC,UAAoC;AA7EjD,QAAAC;AA6EoD,WAAAD,OAAM,eAAe,KAAK,MAAM,MAAM,SAAS,sBAAqBC,MAAA,MAAM,SAAN,gBAAAA,IAAoB,iBAAgB;AAAA,GAAmB,EAC1K,IAAI,CAAC,YAAY;AAChB,QAAI;AACF,UAAI,QAAQ,MAAM,wBAAwB,GAAG;AAC3C,eAAO,KAAK,MAAM,QAAQ,MAAM,WAAW,CAAC;AAAA,MAC9C;AAEA,YAAM,cAAcD,OAAM,SAAS,QAAQ,QAAQ,MAAM,QAAQ,EAC9D,OAAO,CAAC,cAA4C;AArF/D,YAAAC;AAqFkE,eAAAD,OAAM,eAAe,SAAS,MAAM,UAAU,SAAS,wBAAuBC,MAAA,UAAU,SAAV,gBAAAA,IAAwB,iBAAgB;AAAA,OAAqB,EAClM,IAAI,CAAC,cAAyB;AAtFzC,YAAAA;AAuFY,cAAM,QAAQ,UAAU;AACxB,eAAO;AAAA,UACL,GAAG,MAAM;AAAA,UACT,GAAG,MAAM;AAAA,UACT,MAAM,MAAM;AAAA,UACZ,SAAOA,MAAA,MAAM,UAAN,gBAAAA,IAAa,UAAS,MAAM;AAAA,QACrC;AAAA,MACF,CAAC;AAEH,aAAO;AAAA,QACL,MAAM,QAAQ,MAAM;AAAA,QACpB,MAAM,QAAQ,MAAM,QAAQ;AAAA,QAC5B,OAAO,QAAQ,MAAM;AAAA,QACrB,OAAO,QAAQ,MAAM;AAAA,MACvB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,KAAK;AAChD,aAAO;AAAA,IACT;AAAA,EACF,CAAC,EACA,OAAO,CAAC,YAAgC,YAAY,IAAI;AAE3D,QAAM,cAAc,CAAC,GAAI,QAAQ,YAAY,CAAC,GAAI,GAAG,aAAa;AAGlE,QAAM,kBACJ,iBAAY,CAAC,MAAb,mBAAgB,KAAK,IAAI,CAAC,OAAO,UAAU;AACzC,UAAM,YAAiC;AAAA,MACrC,MAAM,MAAM;AAAA,IACd;AACA,gBAAY,QAAQ,CAAC,YAAY;AAC/B,UAAI,QAAQ,KAAK,KAAK,GAAG;AACvB,kBAAU,QAAQ,IAAI,IAAI,QAAQ,KAAK,KAAK,EAAE;AAAA,MAChD;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT,OAAM,CAAC;AAET,QAAM,iBAAiB,gBAAgB,QAAQ,IAAiB,KAAK;AACrE,QAAM,gBAAgB,eAAe,QAAQ,IAAgB,KAAK;AAElE,MAAI,QAAQ,SAAS,UAAU;AAE7B,UAAM,eACJ,iBAAY,CAAC,MAAb,mBAAgB,KAAK,IAAI,CAAC,WAAW;AAAA,MACnC,OAAO,MAAM;AAAA,MACb,MAAM,MAAM,QAAQ,MAAM;AAAA,MAC1B,MAAM,MAAM,SAAS,YAAY,CAAC,EAAE;AAAA,IACtC,QAAO,CAAC;AAEV,UAAM,gBAAc,uBAAY,CAAC,MAAb,mBAAgB,UAAhB,mBAAuB,WAAU,CAAC;AAEtD,WACE,gBAAAF,KAAC,SAAI,WACH,0BAAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAM;AAAA,QACN,QAAO;AAAA,QACP,+BAAC,eACE;AAAA,8BAAQ,YAAR,mBAAiB,SAAjB,YAAyB,gBAAAA,KAAC,WAAQ;AAAA,UACnC,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,SAAQ;AAAA,cACR,MAAM;AAAA,cACN,mBAAmB,YAAY,sBAAsB;AAAA,cACrD,0BAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,UAAU,YAAY,YAAY;AAAA,kBAClC,MAAM,YAAY,aAAa;AAAA,kBAC/B,QAAQ,YAAY,eAAe;AAAA,kBACnC,SAAQ;AAAA;AAAA,cACV;AAAA;AAAA,UACF;AAAA,WACF;AAAA;AAAA,IACF,GACF;AAAA,EAEJ;AAEA,MAAI,QAAQ,SAAS,WAAW;AAE9B,UAAM,cAAc;AAAA,MAClB,MAAM;AAAA,MACN,UAAU,YAAY;AAAA,QAAQ,CAAC,YAC7B,QAAQ,KAAK,IAAI,CAAC,WAAW;AAAA,UAC3B,MAAM,MAAM,QAAQ,OAAO,MAAM,CAAC;AAAA,UAClC,MAAM,MAAM,QAAQ,MAAM;AAAA,UAC1B,MAAM,MAAM,SAAS,QAAQ;AAAA,UAC7B,UAAU,QAAQ;AAAA,QACpB,EAAE;AAAA,MACJ;AAAA,IACF;AAEA,YAAQ,IAAI,iBAAiB,WAAW;AAExC,WACE,gBAAAA,KAAC,SAAI,WACH,0BAAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAM;AAAA,QACN,QAAO;AAAA,QACP;AAAA,UAAC;AAAA;AAAA,YACC,MAAM,YAAY;AAAA,YAClB,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,WAAU;AAAA,YACV,SAAQ;AAAA,YACR,QAAQ,QAAQ,eAAe;AAAA,YAC/B,MAAM,QAAQ,aAAa;AAAA,YAC3B,aAAa,QAAQ,eAAe,IAAI;AAAA,YACxC;AAAA,8BAAAA,KAAC,WAAQ;AAAA,gBACR,aAAQ,WAAR,mBAAgB,SAAO,gBAAAA,KAAC,UAAO;AAAA;AAAA;AAAA,QAClC;AAAA;AAAA,IACF,GACF;AAAA,EAEJ;AAEA,MAAI,QAAQ,SAAS,WAAW;AAC9B,WACE,gBAAAA,KAAC,SAAI,WACH,0BAAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAM;AAAA,QACN,QAAO;AAAA,QACP,+BAAC,gBAAa,QAAQ,EAAE,KAAK,IAAI,OAAO,IAAI,MAAM,GAAG,QAAQ,EAAE,GAC7D;AAAA,0BAAAA,KAAC,iBAAc,iBAAgB,OAAM;AAAA,UACrC,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,SAAQ;AAAA,cACR,MAAK;AAAA;AAAA,UACP;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,SAAQ;AAAA,cACR,MAAK;AAAA;AAAA,UACP;AAAA,WACC,mBAAQ,YAAR,mBAAiB,SAAjB,YAAyB,gBAAAA,KAAC,WAAQ,QAAQ,EAAE,iBAAiB,MAAM,GAAG;AAAA,WACtE,mBAAQ,WAAR,mBAAgB,SAAhB,YAAuB,gBAAAA,KAAC,UAAO,aAAW,aAAQ,WAAR,mBAAgB,cAAa,IAAI;AAAA,UAC3E,YAAY,IAAI,CAAC,YAChB,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,MAAM,QAAQ;AAAA,cACd,MAAM,QAAQ;AAAA,cACd,MAAM,QAAQ;AAAA,cACd,QAAQ,QAAQ;AAAA;AAAA,YAJX,QAAQ;AAAA,UAKf,CACD;AAAA,WACH;AAAA;AAAA,IACF,GACF;AAAA,EAEJ;AAEA,MAAI,QAAQ,SAAS,OAAO;AAG1B,QAAI,YAAY,SAAS,GAAG;AAC1B,YAAM,UAAU,YAAY;AAAA,QAAI,CAAC,YAC/B,QAAQ,KAAK,IAAI,CAAC,WAAW;AAAA,UAC3B,MAAM,MAAM;AAAA,UACZ,OAAO,MAAM;AAAA,UACb,MAAM,QAAQ;AAAA,QAChB,EAAE;AAAA,MACJ;AACA,cAAQ,IAAI,aAAa,OAAO;AAEhC,aACE,gBAAAA,KAAC,SAAI,WACH,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC,OAAM;AAAA,UACN,QAAO;AAAA,UACP,+BAAC,YACE;AAAA,oBAAQ,IAAI,CAAC,MAAM,UAClB,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBAEC;AAAA,gBACA,SAAQ;AAAA,gBACR,SAAQ;AAAA,gBACR,OAAK;AAAA,gBACL,aAAa,KAAK,MAAM,QAAQ,KAAM,MAAM,QAAQ,KAAM,YAAY;AAAA,gBACtE;AAAA;AAAA,kBAEE,KAAK,MAAM,QAAQ,KAAM,MAAM,QAAQ,KAAM,YAAY;AAAA;AAAA,gBAE3D,OAAO;AAAA,kBACL,MAAM,YAAY,KAAK,EAAE;AAAA,kBACzB,QAAQ;AAAA,gBACV;AAAA;AAAA,cAbK;AAAA,YAcP,CACD;AAAA,aACA,mBAAQ,YAAR,mBAAiB,SAAjB,YAAyB,gBAAAA,KAAC,WAAQ;AAAA,aAClC,mBAAQ,WAAR,mBAAgB,SAAhB,YAAuB,gBAAAA,KAAC,UAAO;AAAA,aAClC;AAAA;AAAA,MACF,GACF;AAAA,IAEJ;AAEA,WACE,gBAAAA,KAAC,SAAI,WACH,0BAAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAM;AAAA,QACN,QAAO;AAAA,QACP,+BAAC,YACC;AAAA,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,OAAM,uBAAY,CAAC,MAAb,mBAAgB,SAAhB,mBAAsB,IAAI,CAAC,WAAW;AAAA,gBAC1C,MAAM,MAAM;AAAA,gBACZ,OAAO,MAAM;AAAA,gBACb,MAAM,MAAM;AAAA,cACd;AAAA,cACA,SAAQ;AAAA,cACR,SAAQ;AAAA,cACR,OAAK;AAAA;AAAA,UACP;AAAA,WACC,mBAAQ,YAAR,mBAAiB,SAAjB,YAAyB,gBAAAA,KAAC,WAAQ;AAAA,WAClC,mBAAQ,WAAR,mBAAgB,SAAhB,YAAuB,gBAAAA,KAAC,UAAO;AAAA,WAClC;AAAA;AAAA,IACF,GACF;AAAA,EAEJ;AAEA,QAAM,iBAAiB,CAAC,OAAY,SAAuB;AACzD,QAAI,CAAC;AAAM,aAAO;AAClB,UAAM,SAAS,KAAK,UAAU;AAC9B,WAAO,GAAG,KAAK,GAAG,MAAM;AAAA,EAC1B;AAGA,QAAM,gBAAgB,CAAC,EAAE,QAAQ,SAAS,OAAO,OAAO,MAAM,MAAW;AACvE,QAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ;AAAQ,aAAO;AAEnD,WACE,qBAAC,SAAI,WAAU,sCACb;AAAA,2BAAC,OAAE,WAAU,gBACV;AAAA,WAAG,KAAK,IAAG,+BAAO,WAAU,EAAE;AAAA,SAC9B,+BAAO,UAAS,qBAAC,UAAK,WAAU,yBAAwB;AAAA;AAAA,UAAG,MAAM;AAAA,UAAM;AAAA,WAAC;AAAA,SAC3E;AAAA,MACC,QAAQ,IAAI,CAAC,OAAY,UACxB;AAAA,QAAC;AAAA;AAAA,UAEC,OAAO,EAAE,OAAO,MAAM,MAAM;AAAA,UAC5B,WAAU;AAAA,UACT;AAAA,eAAG,MAAM,IAAI,KAAK,eAAe,MAAM,OAAO,KAAK,CAAC;AAAA,aACpD,+BAAO,UAAS,qBAAC,UAAK,WAAU,yBAAwB;AAAA;AAAA,cAAG,MAAM;AAAA,cAAM;AAAA,eAAC;AAAA;AAAA;AAAA,QAJpE;AAAA,MAKP,CACD;AAAA,OACH;AAAA,EAEJ;AAEA,SACE,gBAAAA,KAAC,SAAI,WACH,0BAAAA;AAAA,IAAC;AAAA;AAAA,MACC,OAAM;AAAA,MACN,QAAO;AAAA,MACP;AAAA,QAAC;AAAA;AAAA,UACC,MAAM;AAAA,UACN,QAAQ,EAAE,KAAK,IAAI,OAAO,IAAI,MAAM,GAAG,QAAQ,EAAE;AAAA,UACjD;AAAA,4BAAAA,KAAC,iBAAc,iBAAgB,OAAM;AAAA,YACrC,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,SAAQ;AAAA,gBACR,QAAO,uBAAG,SAAQ,EAAE,OAAO,EAAE,OAAO,UAAU,SAAS,IAAI;AAAA;AAAA,YAC7D;AAAA,YACA,gBAAAA,KAAC,SAAM,QAAO,uBAAG,SAAQ,EAAE,OAAO,EAAE,OAAO,OAAO,KAAK,UAAU,OAAO,IAAI,QAAW;AAAA,aACtF,mBAAQ,YAAR,mBAAiB,SAAjB,YAAwB,gBAAAA,KAAC,WAAQ;AAAA,aACjC,mBAAQ,WAAR,mBAAgB,SAAhB,YAAuB,gBAAAA,KAAC,UAAO;AAAA,YAC/B,YAAY,IAAI,CAAC,YAAY;AA9VxC,kBAAAE,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC;AA+VY,sBAAQ,QAAQ,MAAM;AAAA,gBACpB,KAAK;AACH,yBACE,gBAAAV;AAAA,oBAAC;AAAA;AAAA,sBAEC,MAAK;AAAA,sBACL,SAAS,QAAQ;AAAA,sBACjB,QAAQ,QAAQ;AAAA,sBAChB,MAAM,QAAQ;AAAA,sBACd,cAAaE,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,sBAC5B,cAAaC,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,sBAC5B,OACEC,MAAA,QAAQ,UAAR,gBAAAA,IAAe,OACX;AAAA,wBACE,aAAa,QAAQ,MAAM,eAAe;AAAA,wBAC1C,GAAG,QAAQ,MAAM,aAAa;AAAA,wBAC9B,MAAM,QAAQ;AAAA,sBAChB,IACA;AAAA;AAAA,oBAdD,QAAQ;AAAA,kBAgBf;AAAA,gBAEJ,KAAK;AACH,yBACE,gBAAAJ;AAAA,oBAAC;AAAA;AAAA,sBAEC,MAAK;AAAA,sBACL,SAAS,QAAQ;AAAA,sBACjB,QAAQ,QAAQ;AAAA,sBAChB,MAAM,QAAQ;AAAA,sBACd,cAAaK,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,sBAC5B,cAAaC,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA;AAAA,oBANvB,QAAQ;AAAA,kBAOf;AAAA,gBAEJ,KAAK;AACH,yBACE,gBAAAN;AAAA,oBAAC;AAAA;AAAA,sBAEC,SAAS,QAAQ;AAAA,sBACjB,QAAQ,QAAQ;AAAA,sBAChB,MAAM,QAAQ;AAAA,sBACd,cAAaO,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,sBAC5B,cAAaC,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA;AAAA,oBALvB,QAAQ;AAAA,kBAMf;AAAA,gBAEJ;AACE,yBACE,gBAAAR;AAAA,oBAAC;AAAA;AAAA,sBAEC,MAAK;AAAA,sBACL,SAAS,QAAQ;AAAA,sBACjB,QAAQ,QAAQ;AAAA,sBAChB,MAAM,QAAQ;AAAA,sBACd,cAAaS,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,sBAC5B,cAAaC,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA;AAAA,oBANvB,QAAQ;AAAA,kBAOf;AAAA,cAEN;AAAA,YACF,CAAC;AAAA;AAAA;AAAA,MACH;AAAA;AAAA,EACF,GACF;AAEJ;AAEA,eAAe,cAAc;;;AG/YjB,SACE,OAAAV,MADF,QAAAW,aAAA;AAbL,IAAM,kBAAqD,CAAC;AAAA,EACjE;AAAA,EACA;AACF,MAAM;AAPN;AAQE,QAAM,EAAE,QAAQ,IAAI,aAAa;AAEjC,MAAI,GAAC,aAAQ,aAAR,mBAAkB;AAAQ,WAAO;AAEtC,SACE,gBAAAX,KAAC,SAAI,WACF,sBACC,gBAAAA,KAAC,QAAG,WAAU,cACX,kBAAQ,SAAS,IAAI,CAAC,SAAS,UAC9B,gBAAAW,MAAC,QAAe,WAAU,2BACxB;AAAA,oBAAAX;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,OAAO,EAAE,iBAAiB,QAAQ,MAAM;AAAA;AAAA,IAC1C;AAAA,IACA,gBAAAA,KAAC,UAAM,kBAAQ,MAAK;AAAA,OALb,KAMT,CACD,GACH,GAEJ;AAEJ;;;ACHsD,gBAAAA,YAAA;AAHtD,IAAM,gBAA0C,CAAC,EAAE,UAAU,GAAG,QAAQ,MAAM;AAC5E,SACE,gBAAAA,KAAC,qBAAkB,SACjB,0BAAAA,KAAC,SAAI,WAAW,QAAQ,WAAY,sBAAY,gBAAAA,KAAC,kBAAe,SAAkB,GAAG,GACvF;AAEJ;AAEO,IAAM,YAAgC,OAAO,OAAO,eAAe;AAAA,EACxE,OAAO;AAAA,EACP,aAAa;AAAA,EACb,OAAO;AAAA,EACP,SAAS;AAAA,EACT,WAAW;AAAA,EACX,QAAQ;AACV,CAAC;;;ACvBM,IAAM,aAAa,MAAM;AAC9B,UAAQ,IAAI,aAAa;AAC3B","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\nimport { BillboardContextType, BillboardOptions, Dataset } from \"../types\";\n\nconst BillboardContext = createContext<BillboardContextType | undefined>(undefined);\n\nexport interface BillboardProviderProps {\n  children: React.ReactNode;\n  options: BillboardOptions;\n}\n\nexport const BillboardProvider: React.FC<BillboardProviderProps> = ({ children, options: initialOptions }) => {\n  const defaultOptions = {\n    legend: {\n      show: true,\n      className: \"\",\n      position: \"bottom\" as const,\n    },\n    tooltip: {\n      show: true,\n    },\n  };\n  // Only store datasets from props, component-based datasets will be handled directly\n  const [propDatasets] = useState<Dataset[]>(initialOptions.datasets || []);\n\n  const value = {\n    options: {\n      ...defaultOptions,\n      ...initialOptions,\n      datasets: propDatasets,\n    },\n  };\n\n  return <BillboardContext.Provider value={value}>{children}</BillboardContext.Provider>;\n};\n\nexport const useBillboard = () => {\n  const context = useContext(BillboardContext);\n  if (!context) {\n    throw new Error(\"useBillboard must be used within a BillboardProvider\");\n  }\n  return context;\n};\n","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardTitle: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n  const title = children || options.title;\n\n  if (!title) return null;\n\n  return (\n    <h2 className={className}>\n      {title}\n    </h2>\n  );\n};\n","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardDescription: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n  const description = children || options.description;\n\n  if (!description) return null;\n\n  return (\n    <p className={className}>\n      {description}\n    </p>\n  );\n};","import React from \"react\";\nimport { LineChart, Line, BarChart, Bar, AreaChart, Area, PieChart, Pie, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, FunnelChart, Funnel, LabelList, TooltipProps, Treemap } from \"recharts\";\nimport { BillboardChartProps, Dataset, DataPoint } from \"../../types\";\nimport { useBillboard } from \"../../context/BillboardContext\";\nimport { BillboardDataset } from \"./BillboardDataset\";\nimport { BillboardDatapoint } from \"./BillboardDatapoint\";\n\ntype ChartComponentType = typeof ChartComponents;\ntype DataComponentType = typeof DataComponents;\ntype ChartType = keyof ChartComponentType;\ntype DataType = keyof DataComponentType;\n\ninterface UnitOptions {\n  symbol?: string;\n  label?: string;\n  id?: number | string;\n}\n\nconst ChartComponents = {\n  line: LineChart,\n  area: AreaChart,\n  bar: BarChart,\n  pie: PieChart,\n  scatter: ScatterChart,\n  composed: LineChart,\n  bubble: ScatterChart,\n  funnel: FunnelChart,\n} as const;\n\nconst DataComponents = {\n  line: Line,\n  area: Area,\n  bar: Bar,\n  pie: Pie,\n  scatter: Scatter,\n} as const;\n\n// Helper function for unit formatting\nconst formatWithUnit = (value: any, unit?: UnitOptions): string => {\n  if (!unit) return String(value);\n  const symbol = unit.symbol || \"\";\n  return `${value}${symbol}`;\n};\n\n// Custom Tooltip Component\ninterface CustomTooltipProps extends TooltipProps<any, any> {\n  xUnit?: UnitOptions;\n  yUnit?: UnitOptions;\n}\n\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ active, payload, label, xUnit, yUnit }) => {\n  if (!active || !payload || !payload.length) return null;\n\n  return (\n    <div className=\"bg-white p-2 border rounded shadow\">\n      <p className=\"text-sm mb-1\">\n        {`${label}${xUnit?.symbol || \"\"}`}\n        {xUnit?.label && <span className=\"text-gray-500 text-xs\"> ({xUnit.label})</span>}\n      </p>\n      {payload.map((entry: any, index: number) => (\n        <p\n          key={index}\n          style={{ color: entry.color }}\n          className=\"text-sm\">\n          {`${entry.name}: ${formatWithUnit(entry.value, yUnit)}`}\n          {yUnit?.label && <span className=\"text-gray-500 text-xs\"> ({yUnit.label})</span>}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport const BillboardChart: React.FC<BillboardChartProps> = ({ children, className, x, y }) => {\n  const { options } = useBillboard();\n\n  // Extract datasets from children\n  const childDatasets = React.Children.toArray(children)\n    .filter((child): child is React.ReactElement => React.isValidElement(child) && (child.type === BillboardDataset || (child.type as any)?.displayName === \"BillboardDataset\"))\n    .map((dataset) => {\n      try {\n        if (dataset.props[\"data-billboard-dataset\"]) {\n          return JSON.parse(dataset.props[\"data-info\"]) as Dataset;\n        }\n\n        const childPoints = React.Children.toArray(dataset.props.children)\n          .filter((datapoint): datapoint is React.ReactElement => React.isValidElement(datapoint) && (datapoint.type === BillboardDatapoint || (datapoint.type as any)?.displayName === \"BillboardDatapoint\"))\n          .map((datapoint): DataPoint => {\n            const props = datapoint.props;\n            return {\n              x: props.x,\n              y: props.y,\n              name: props.name,\n              color: props.style?.color || props.color,\n            };\n          });\n\n        return {\n          name: dataset.props.name,\n          data: dataset.props.data || childPoints,\n          color: dataset.props.color,\n          style: dataset.props.style,\n        } as Dataset;\n      } catch (error) {\n        console.error(\"Error processing dataset:\", error);\n        return null;\n      }\n    })\n    .filter((dataset): dataset is Dataset => dataset !== null);\n\n  const allDatasets = [...(options.datasets || []), ...childDatasets];\n\n  // Format data for Recharts\n  const formattedData =\n    allDatasets[0]?.data.map((point, index) => {\n      const dataPoint: Record<string, any> = {\n        name: point.x,\n      };\n      allDatasets.forEach((dataset) => {\n        if (dataset.data[index]) {\n          dataPoint[dataset.name] = dataset.data[index].y;\n        }\n      });\n      return dataPoint;\n    }) || [];\n\n  const ChartComponent = ChartComponents[options.type as ChartType] || LineChart;\n  const DataComponent = DataComponents[options.type as DataType] || Line;\n\n  if (options.type === \"funnel\") {\n    // Transform data for funnel chart\n    const funnelData =\n      allDatasets[0]?.data.map((point) => ({\n        value: point.y,\n        name: point.name || point.x,\n        fill: point.color || allDatasets[0].color,\n      })) || [];\n\n    const funnelStyle = allDatasets[0]?.style?.funnel || {};\n\n    return (\n      <div className={className}>\n        <ResponsiveContainer\n          width=\"100%\"\n          height=\"100%\">\n          <FunnelChart>\n            {options.tooltip?.show ?? <Tooltip />}\n            <Funnel\n              dataKey=\"value\"\n              data={funnelData}\n              isAnimationActive={funnelStyle.isAnimationActive !== false}>\n              <LabelList\n                position={funnelStyle.position || \"right\"}\n                fill={funnelStyle.labelFill || \"#000\"}\n                stroke={funnelStyle.labelStroke || \"none\"}\n                dataKey=\"name\"\n              />\n            </Funnel>\n          </FunnelChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  if (options.type === \"treemap\") {\n    // Restructure data for treemap\n    const treemapData = {\n      name: \"root\",\n      children: allDatasets.flatMap((dataset) =>\n        dataset.data.map((point) => ({\n          name: point.name || String(point.x),\n          size: point.size || point.y,\n          fill: point.color || dataset.color,\n          category: dataset.name,\n        }))\n      ),\n    };\n\n    console.log(\"Treemap Data:\", treemapData);\n\n    return (\n      <div className={className}>\n        <ResponsiveContainer\n          width=\"100%\"\n          height=\"100%\">\n          <Treemap\n            data={treemapData.children}\n            width={400}\n            height={400}\n            className=\"treemap\"\n            dataKey=\"size\"\n            stroke={options.strokeColor || \"#fff\"}\n            fill={options.fillColor || \"#888\"}\n            aspectRatio={options.aspectRatio || 4 / 3}>\n            <Tooltip />\n            {options.legend?.show&& <Legend />}\n          </Treemap>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  if (options.type === \"scatter\") {\n    return (\n      <div className={className}>\n        <ResponsiveContainer\n          width=\"100%\"\n          height=\"100%\">\n          <ScatterChart margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              type=\"number\"\n              dataKey=\"x\"\n              name=\"x\"\n            />\n            <YAxis\n              type=\"number\"\n              dataKey=\"y\"\n              name=\"y\"\n            />\n            {options.tooltip?.show ?? <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />}\n            {options.legend?.show?? <Legend className={options.legend?.className || \"\"} />}\n            {allDatasets.map((dataset) => (\n              <Scatter\n                key={dataset.name}\n                name={dataset.name}\n                data={dataset.data}\n                fill={dataset.color}\n                stroke={dataset.color}\n              />\n            ))}\n          </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  if (options.type === \"pie\") {\n    // if more than 1 dataset is provided, maps these datsets from inner to outter rings!\n\n    if (allDatasets.length > 1) {\n      const pieData = allDatasets.map((dataset) =>\n        dataset.data.map((point) => ({\n          name: point.x,\n          value: point.y,\n          fill: dataset.color,\n        }))\n      );\n      console.log(\"Pie Data:\", pieData);\n\n      return (\n        <div className={className}>\n          <ResponsiveContainer\n            width=\"100%\"\n            height=\"100%\">\n            <PieChart>\n              {pieData.map((data, index) => (\n                <Pie\n                  key={index}\n                  data={data}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  label\n                  innerRadius={50 + 20 * (index + 1) - (20 * (index + 1)) / allDatasets.length}\n                  outerRadius={\n                    // calculate outer radius based on space available\n                    50 + 20 * (index + 2) - (20 * (index + 2)) / allDatasets.length\n                  }\n                  style={{\n                    fill: allDatasets[index].color,\n                    zIndex: index,\n                  }}\n                />\n              ))}\n              {options.tooltip?.show ?? <Tooltip />}\n              {options.legend?.show?? <Legend />}\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      );\n    }\n\n    return (\n      <div className={className}>\n        <ResponsiveContainer\n          width=\"100%\"\n          height=\"100%\">\n          <PieChart>\n            <Pie\n              data={allDatasets[0]?.data?.map((point) => ({\n                name: point.x,\n                value: point.y,\n                fill: point.color,\n              }))}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              label\n            />\n            {options.tooltip?.show ?? <Tooltip />}\n            {options.legend?.show?? <Legend />}\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  const formatWithUnit = (value: any, unit?: UnitOptions) => {\n    if (!unit) return value;\n    const symbol = unit.symbol || \"\";\n    return `${value}${symbol}`;\n  };\n\n  // Create custom Tooltip content\n  const CustomTooltip = ({ active, payload, label, xUnit, yUnit }: any) => {\n    if (!active || !payload || !payload.length) return null;\n\n    return (\n      <div className=\"bg-white p-2 border rounded shadow\">\n        <p className=\"text-sm mb-1\">\n          {`${label}${xUnit?.symbol || \"\"}`}\n          {xUnit?.label && <span className=\"text-gray-500 text-xs\"> ({xUnit.label})</span>}\n        </p>\n        {payload.map((entry: any, index: number) => (\n          <p\n            key={index}\n            style={{ color: entry.color }}\n            className=\"text-sm\">\n            {`${entry.name}: ${formatWithUnit(entry.value, yUnit)}`}\n            {yUnit?.label && <span className=\"text-gray-500 text-xs\"> ({yUnit.label})</span>}\n          </p>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <ResponsiveContainer\n        width=\"100%\"\n        height=\"100%\">\n        <ChartComponent\n          data={formattedData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"name\"\n            label={x?.title ? { value: x.title, position: \"bottom\" } : undefined}\n          />\n          <YAxis label={y?.title ? { value: y.title, angle: -90, position: \"left\" } : undefined} />\n          {options.tooltip?.show ??<Tooltip />}\n          {options.legend?.show?? <Legend />}\n          {allDatasets.map((dataset) => {\n            switch (options.type) {\n              case \"line\":\n                return (\n                  <Line\n                    key={dataset.name}\n                    type=\"monotone\"\n                    dataKey={dataset.name}\n                    stroke={dataset.color}\n                    fill={dataset.color}\n                    strokeWidth={dataset.style?.strokeWidth}\n                    fillOpacity={dataset.style?.fillOpacity}\n                    dot={\n                      dataset.style?.dot\n                        ? {\n                            strokeWidth: dataset.style.strokeWidth || 1,\n                            r: dataset.style.dotRadius || 3,\n                            fill: dataset.color,\n                          }\n                        : false\n                    }\n                  />\n                );\n              case \"area\":\n                return (\n                  <Area\n                    key={dataset.name}\n                    type=\"monotone\"\n                    dataKey={dataset.name}\n                    stroke={dataset.color}\n                    fill={dataset.color}\n                    strokeWidth={dataset.style?.strokeWidth}\n                    fillOpacity={dataset.style?.fillOpacity}\n                  />\n                );\n              case \"bar\":\n                return (\n                  <Bar\n                    key={dataset.name}\n                    dataKey={dataset.name}\n                    stroke={dataset.color}\n                    fill={dataset.color}\n                    strokeWidth={dataset.style?.strokeWidth}\n                    fillOpacity={dataset.style?.fillOpacity}\n                  />\n                );\n              default:\n                return (\n                  <Line\n                    key={dataset.name}\n                    type=\"monotone\"\n                    dataKey={dataset.name}\n                    stroke={dataset.color}\n                    fill={dataset.color}\n                    strokeWidth={dataset.style?.strokeWidth}\n                    fillOpacity={dataset.style?.fillOpacity}\n                  />\n                );\n            }\n          })}\n        </ChartComponent>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nBillboardChart.displayName = \"BillboardChart\";\n","import React, { useMemo } from 'react';\nimport { BillboardDatasetProps } from '../../types';\nimport { BillboardDatapoint } from './BillboardDatapoint';\n\ninterface ExtendedBillboardDatasetProps extends Omit<BillboardDatasetProps, 'data'> {\n  data?: BillboardDatasetProps['data'];\n  children?: React.ReactNode;\n}\n\nexport const BillboardDataset: React.FC<ExtendedBillboardDatasetProps> = ({\n  data,\n  name = '',\n  color,\n  children,\n  style,\n}) => {\n  const processedData = useMemo(() => {\n    if (children) {\n      return React.Children.toArray(children)\n        .filter(child => \n          React.isValidElement(child) && \n          (child.type === BillboardDatapoint || (child.type as any)?.displayName === 'BillboardDatapoint')\n        )\n        .map(child => {\n          const props = (child as React.ReactElement).props;\n          return {\n            x: props.x,\n            y: props.y,\n            name: props.name,\n            color: props.style?.color || props.color\n          };\n        });\n    }\n    return data || [];\n  }, [children, data]);\n\n  // Store the dataset info\n  const datasetInfo = {\n    name,\n    data: processedData,\n    color,\n    style\n  };\n\n  // Return a hidden div with the dataset info as a data attribute\n  return (\n    <div \n      style={{ display: 'none' }}\n      data-billboard-dataset={true}\n      data-info={JSON.stringify(datasetInfo)}\n    >\n      {children}\n    </div>\n  );\n};\n\nBillboardDataset.displayName = 'BillboardDataset';","import React from 'react';\nimport { DataPoint, DataPointStyle } from '../../types';\n\nexport interface BillboardDatapointProps extends Omit<DataPoint, 'name'> {\n  name?: string;\n  z?: number;\n  style?: DataPointStyle;\n}\n\nexport const BillboardDatapoint: React.FC<BillboardDatapointProps> = (props) => {\n  return (\n    <div\n      style={{ display: 'block' }}\n      data-billboard-datapoint={true}\n      data-point={JSON.stringify(props)}\n    />\n  );\n};\n\nBillboardDatapoint.displayName = 'BillboardDatapoint';","import React from 'react';\nimport { BillboardComponentProps } from '../../types';\nimport { useBillboard } from '../../context/BillboardContext';\n\nexport const BillboardLegend: React.FC<BillboardComponentProps> = ({\n  children,\n  className,\n}) => {\n  const { options } = useBillboard();\n\n  if (!options.datasets?.length) return null;\n\n  return (\n    <div className={className}>\n      {children || (\n        <ul className=\"flex gap-4\">\n          {options.datasets.map((dataset, index) => (\n            <li key={index} className=\"flex items-center gap-2\">\n              <span\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: dataset.color }}\n              />\n              <span>{dataset.name}</span>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};","import React from \"react\";\nimport { BillboardProvider } from \"../../context/BillboardContext\";\nimport { BillboardOptions } from \"../../types\";\nimport { BillboardTitle } from \"./BillboardTitle\";\nimport { BillboardDescription } from \"./BillboardDescription\";\nimport { BillboardChart } from \"./BillboardChart\";\nimport { BillboardDataset } from \"./BillboardDataset\";\nimport { BillboardDatapoint } from \"./BillboardDatapoint\";\nimport { BillboardLegend } from \"./BillboardLegend\";\n\nexport interface BillboardProps extends BillboardOptions {\n  children?: React.ReactNode;\n}\n\ninterface BillboardComponent extends React.FC<BillboardProps> {\n  Title: typeof BillboardTitle;\n  Description: typeof BillboardDescription;\n  Chart: typeof BillboardChart;\n  Dataset: typeof BillboardDataset;\n  Datapoint: typeof BillboardDatapoint;\n  Legend: typeof BillboardLegend;\n}\n\nconst BillboardBase: React.FC<BillboardProps> = ({ children, ...options }) => {\n  return (\n    <BillboardProvider options={options}>\n      <div className={options.className}>{children || <BillboardChart options={options} />}</div>\n    </BillboardProvider>\n  );\n};\n\nexport const Billboard: BillboardComponent = Object.assign(BillboardBase, {\n  Title: BillboardTitle,\n  Description: BillboardDescription,\n  Chart: BillboardChart,\n  Dataset: BillboardDataset,\n  Datapoint: BillboardDatapoint,\n  Legend: BillboardLegend,\n});\n","export { Billboard } from './components/Billboard/Billboard';\nexport type { BillboardProps } from './components/Billboard/Billboard';\nexport type {\n  ChartType,\n  DataComponentType,\n  AxisOptions,\n  DataPoint,\n  DataPointStyle,\n  Dataset,\n  BillboardOptions,\n  BillboardComponentProps,\n  BillboardChartProps,\n  BillboardDatasetProps\n} from './types';\n\nexport const testExport = () => {\n  console.log('Test export');\n};"]}